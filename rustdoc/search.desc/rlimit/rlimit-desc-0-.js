searchState.loadedDescShard("rlimit", 0, "rlimit - Resource limits.\nThe maximum size (in bytes) of the process’s virtual …\nThe maximum size (in bytes) of a core file that the …\nA limit (in seconds) on the amount of CPU time that the …\nThe maximum size (in bytes) of the process’s data …\nThe maximum size (in bytes) of files that the process may …\nA value indicating no limit.\nThe maximum number of kqueues this user id is allowed to …\n(early Linux 2.4 only)\nThe maximum number (in bytes) of memory that may be locked …\nA limit on the number of bytes that can be allocated for …\nThis specifies a ceiling to which the process’s nice …\nThis specifies a value one greater than the maximum file …\nThe number of open vnode monitors.\nA limit on the number of extant process (or, more …\nThe maximum number of pseudo-terminals this user id is …\nThe maximum number of simultaneous threads (Lightweight …\nThe maximum number of POSIX-type advisory-mode locks …\nA process’s resource limit field.\nA process’s resource limits. It is parsed from the <strong>proc</strong> …\nA limit (in bytes) on the process’s resident set (the …\nThis specifies a ceiling on the real-time priority that …\nA limit (in microseconds) on the amount of CPU time that a …\nA kind of resource.\nThe maximum size (in bytes) of socket buffer usage for …\nA limit on the number of signals that may be queued for …\nThe maximum size (in bytes) of the process stack.\nThe maximum size (in bytes) of the swap space that may be …\n<strong>AIX</strong>: The maximum number of threads each process can …\nThe number of shared locks a given user may create …\nAn alias for <code>RLIMIT_AS</code>. The maximum size of a process’s …\nReturns the name of the resource.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet resource limits.\nGet hard resource limit (<code>rlim_max</code>)\nGet soft resource limit (<code>rlim_cur</code>)\nReturns the number of simultaneously open files permitted …\nGet resource limits.\nHard limit. <code>None</code> indicates <code>unlimited</code>.\nTry to increase NOFILE limit and return the current soft …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the current platform supports this …\nMax address space. See also <code>Resource::AS</code>.\nMax core file size. See also <code>Resource::CORE</code>.\nMax cpu time. See also <code>Resource::CPU</code>.\nMax data size. See also <code>Resource::DATA</code>.\nMax file locks. See also <code>Resource::LOCKS</code>.\nMax file size. See also <code>Resource::FSIZE</code>.\nMax locked memory. See also <code>Resource::MEMLOCK</code>.\nMax msgqueue size. See also <code>Resource::MSGQUEUE</code>.\nMax nice priority. See also <code>Resource::NICE</code>.\nMax open files. See also <code>Resource::NOFILE</code>.\nMax pending signals. See also <code>Resource::SIGPENDING</code>.\nMax processes. See also <code>Resource::NPROC</code>.\nMax realtime priority. See also <code>Resource::RTPRIO</code>.\nMax realtime timeout. See also <code>Resource::RTTIME</code>.\nMax resident set. See also <code>Resource::RSS</code>.\nMax stack size. See also <code>Resource::STACK</code>.\nThe type of a process ID\nSet and get the resource limits of an arbitrary process.\nReads a process’s resource limits from <code>/proc/[pid]/limits</code>…\nReads the current process’s resource limits from …\nSet resource limits.\nSets a maximum for the number of simultaneously open files …\nSet resource limits.\nSoft limit. <code>None</code> indicates <code>unlimited</code>.")